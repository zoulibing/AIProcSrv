/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include <thirft-gen/test_types.h>

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace rock {


Request::~Request() throw() {
}


void Request::__set_camID(const int32_t val) {
  this->camID = val;
}

void Request::__set_serialID(const int32_t val) {
  this->serialID = val;
}

void Request::__set_width(const int32_t val) {
  this->width = val;
}

void Request::__set_height(const int32_t val) {
  this->height = val;
}

void Request::__set_pic_nums(const int32_t val) {
  this->pic_nums = val;
}

void Request::__set_pic_per_size(const int32_t val) {
  this->pic_per_size = val;
}

void Request::__set_buff(const std::string& val) {
  this->buff = val;
}

uint32_t Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->camID);
          this->__isset.camID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->serialID);
          this->__isset.serialID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pic_nums);
          this->__isset.pic_nums = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pic_per_size);
          this->__isset.pic_per_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->buff);
          this->__isset.buff = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Request");

  xfer += oprot->writeFieldBegin("camID", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->camID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serialID", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->serialID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pic_nums", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->pic_nums);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pic_per_size", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->pic_per_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buff", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeBinary(this->buff);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Request &a, Request &b) {
  using ::std::swap;
  swap(a.camID, b.camID);
  swap(a.serialID, b.serialID);
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.pic_nums, b.pic_nums);
  swap(a.pic_per_size, b.pic_per_size);
  swap(a.buff, b.buff);
  swap(a.__isset, b.__isset);
}

Request::Request(const Request& other0) {
  camID = other0.camID;
  serialID = other0.serialID;
  width = other0.width;
  height = other0.height;
  pic_nums = other0.pic_nums;
  pic_per_size = other0.pic_per_size;
  buff = other0.buff;
  __isset = other0.__isset;
}
Request& Request::operator=(const Request& other1) {
  camID = other1.camID;
  serialID = other1.serialID;
  width = other1.width;
  height = other1.height;
  pic_nums = other1.pic_nums;
  pic_per_size = other1.pic_per_size;
  buff = other1.buff;
  __isset = other1.__isset;
  return *this;
}
void Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Request(";
  out << "camID=" << to_string(camID);
  out << ", " << "serialID=" << to_string(serialID);
  out << ", " << "width=" << to_string(width);
  out << ", " << "height=" << to_string(height);
  out << ", " << "pic_nums=" << to_string(pic_nums);
  out << ", " << "pic_per_size=" << to_string(pic_per_size);
  out << ", " << "buff=" << to_string(buff);
  out << ")";
}


ResultItem::~ResultItem() throw() {
}


void ResultItem::__set_name(const std::string& val) {
  this->name = val;
}

void ResultItem::__set_id(const int32_t val) {
  this->id = val;
}

void ResultItem::__set_x0(const int32_t val) {
  this->x0 = val;
}

void ResultItem::__set_y0(const int32_t val) {
  this->y0 = val;
}

void ResultItem::__set_x1(const int32_t val) {
  this->x1 = val;
}

void ResultItem::__set_y1(const int32_t val) {
  this->y1 = val;
}

uint32_t ResultItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x0);
          this->__isset.x0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y0);
          this->__isset.y0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x1);
          this->__isset.x1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y1);
          this->__isset.y1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResultItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ResultItem");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x0", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->x0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y0", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->y0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x1", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->x1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y1", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->y1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResultItem &a, ResultItem &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.id, b.id);
  swap(a.x0, b.x0);
  swap(a.y0, b.y0);
  swap(a.x1, b.x1);
  swap(a.y1, b.y1);
  swap(a.__isset, b.__isset);
}

ResultItem::ResultItem(const ResultItem& other2) {
  name = other2.name;
  id = other2.id;
  x0 = other2.x0;
  y0 = other2.y0;
  x1 = other2.x1;
  y1 = other2.y1;
  __isset = other2.__isset;
}
ResultItem& ResultItem::operator=(const ResultItem& other3) {
  name = other3.name;
  id = other3.id;
  x0 = other3.x0;
  y0 = other3.y0;
  x1 = other3.x1;
  y1 = other3.y1;
  __isset = other3.__isset;
  return *this;
}
void ResultItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResultItem(";
  out << "name=" << to_string(name);
  out << ", " << "id=" << to_string(id);
  out << ", " << "x0=" << to_string(x0);
  out << ", " << "y0=" << to_string(y0);
  out << ", " << "x1=" << to_string(x1);
  out << ", " << "y1=" << to_string(y1);
  out << ")";
}


Respone::~Respone() throw() {
}


void Respone::__set_cameID(const int32_t val) {
  this->cameID = val;
}

void Respone::__set_serialID(const int32_t val) {
  this->serialID = val;
}

void Respone::__set_ritems(const std::vector<ResultItem> & val) {
  this->ritems = val;
}

uint32_t Respone::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cameID);
          this->__isset.cameID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->serialID);
          this->__isset.serialID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ritems.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->ritems.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->ritems[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ritems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Respone::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Respone");

  xfer += oprot->writeFieldBegin("cameID", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->cameID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serialID", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->serialID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ritems", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ritems.size()));
    std::vector<ResultItem> ::const_iterator _iter9;
    for (_iter9 = this->ritems.begin(); _iter9 != this->ritems.end(); ++_iter9)
    {
      xfer += (*_iter9).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Respone &a, Respone &b) {
  using ::std::swap;
  swap(a.cameID, b.cameID);
  swap(a.serialID, b.serialID);
  swap(a.ritems, b.ritems);
  swap(a.__isset, b.__isset);
}

Respone::Respone(const Respone& other10) {
  cameID = other10.cameID;
  serialID = other10.serialID;
  ritems = other10.ritems;
  __isset = other10.__isset;
}
Respone& Respone::operator=(const Respone& other11) {
  cameID = other11.cameID;
  serialID = other11.serialID;
  ritems = other11.ritems;
  __isset = other11.__isset;
  return *this;
}
void Respone::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Respone(";
  out << "cameID=" << to_string(cameID);
  out << ", " << "serialID=" << to_string(serialID);
  out << ", " << "ritems=" << to_string(ritems);
  out << ")";
}

} // namespace
